rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User addresses subcollection
      match /addresses/{addressId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User wishlist subcollection
      match /wishlist/{productId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User cart subcollection (for persistent cart storage)
      match /cart/{cartItemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Products collection - public read, admin write
    match /products/{productId} {
      allow read: if true; // Public read access for all products
      allow write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin' ||
         request.auth.uid in resource.data.admins);
      
      // Product reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true; // Public read access
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.userId;
        allow update, delete: if request.auth != null && 
          (request.auth.uid == resource.data.userId || 
           request.auth.token.admin == true);
      }
    }
    
    // Categories collection - public read, admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Orders collection - users can read/create their own orders
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.admin == true);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validateOrderData(request.resource.data);
      allow update: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
      
      // Order items subcollection
      match /items/{itemId} {
        allow read, write: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.userId ||
           request.auth.token.admin == true);
      }
    }
    
    // Coupons collection - public read, admin write
    match /coupons/{couponId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Site settings - public read, admin write
    match /settings/{settingId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Admin collection - admin only
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Analytics collection - admin only
    match /analytics/{document=**} {
      allow read, write: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Newsletter subscriptions - public create, admin read/write
    match /newsletter/{subscriptionId} {
      allow create: if true;
      allow read, update, delete: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Contact forms - public create, admin read
    match /contacts/{contactId} {
      allow create: if true;
      allow read: if request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Helper functions
    
    // Validate order data structure and required fields
    function validateOrderData(orderData) {
      return orderData.keys().hasAll(['userId', 'items', 'total', 'status', 'shippingInfo']) &&
             orderData.userId is string &&
             orderData.items is list &&
             orderData.items.size() > 0 &&
             orderData.total is number &&
             orderData.total > 0 &&
             orderData.status in ['pending', 'processing', 'shipped', 'delivered', 'cancelled'] &&
             orderData.shippingInfo.keys().hasAll(['firstName', 'lastName', 'address', 'city', 'zipCode']);
    }
    
    // Check if user is admin
    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.admin == true || 
         request.auth.token.role == 'admin');
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Validate product data
    function validateProductData(productData) {
      return productData.keys().hasAll(['name', 'price', 'category', 'description']) &&
             productData.name is string &&
             productData.name.size() > 0 &&
             productData.price is number &&
             productData.price > 0 &&
             productData.category is string &&
             productData.description is string;
    }
    
    // Validate user data
    function validateUserData(userData) {
      return userData.keys().hasAll(['email']) &&
             userData.email is string &&
             userData.email.matches('.*@.*\\..*');
    }
    
    // Rate limiting for sensitive operations
    function rateLimitCheck(collection, userId, maxPerHour) {
      return request.auth != null &&
        query(collection, 
          where('userId', '==', userId),
          where('createdAt', '>', timestamp.date(2023, 1, 1).toMillis() - 3600000)
        ).size() < maxPerHour;
    }
  }
}